
# settings for administrator authentication, which lets to get access
# if it's possible to server root resources enumerated in roots.json file.
[authentication]

# default account ID for user on localhost.
default-account-id = 0

# access token time to live, in seconds
access-ttl = 86400 ; 1*24*60*60 = 1 day

# refresh token time to live, in seconds
refresh-ttl = 259200 ; 3*24*60*60 = 3 days

# key for access HS-256 JWT-tokens.
access-key = "skJgM4NsbP3fs4k7vh0gfdkgGl8dJTszdLxZ1sQ9ksFnxbgvw2RsGH8xxddUV479"

# key for refresh HS-256 JWT-tokens.
refresh-key = "zxK4dUnuq3Lhd1Gzhpr3usI5lAzgvy2t3fmxld2spzz7a5nfv0hsksm9cheyutie"

# can list of all shares be visible for unauthorized user for root path
show-shares-user = false ; true - can be visible, false - can not

# photos options
[photo]

# maximum image size to make thumbnail
thumb-max-file = ‭‭50397184‬‬ ; 4096*3072*4 + 65536, 48M, max 4K image + 64K exif metadata

# web server settings
[webserver]

# list of address:port values for non-encrypted connections
addr-http = :80, :8080 ; list format: "address:port"

# list of address:port values for encrypted connections
addr-tls = :443, :4804 ; list format: "address:port"

# Indicates to get TLS-certificate from letsencrypt.org service if this value is true.
# Uses local TLS-certificate otherwise.
auto-cert = false

# "read-timeout" is the maximum duration for reading the entire
# request, including the body.
# Because read-timeout does not let handlers make per-request
# decisions on each request body's acceptable deadline or
# upload rate, most users will prefer to use
# "read-header-timeout". It is valid to use them both.
read-timeout = 15 ; in seconds

# "read-header-timeout" is the amount of time allowed to read
# request headers. The connection's read deadline is reset
# after reading the headers and the handler can decide what
# is considered too slow for the body.
read-header-timeout = 15 ; in seconds

# "write-timeout" is the maximum duration before timing out
# writes of the response. It is reset whenever a new
# request's header is read. Like "read-timeout", it does not
# let handlers make decisions on a per-request basis.
write-timeout = 15 ; in seconds

# "idle-timeout" is the maximum amount of time to wait for the
# next request when keep-alives are enabled. If idle-timeout
# is zero, the value of read-timeout is used. If both are
# zero, read-header-timeout is used.
idle-timeout = 60 ; in seconds

# "max-header-bytes" controls the maximum number of bytes the
# server will read parsing the request header's keys and
# values, including the request line. It does not limit the
# size of the request body.
# If zero, 1M is used.
max-header-bytes = 1048576 ; in bytes

# on 'true' use memory mapping technology for access to wpk-package nested files.
# on 'false' use wpk-package loaded into one solid byte slice.
wpk-mmap = false

# The End.